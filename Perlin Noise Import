using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.IO;

public class PerlinNoiseImport : MonoBehaviour
{
    public int width = 250;
    public int height = 250;

    public int squareSize = 10;

    private void Start()
    {
        //Changes the texture of the renderer material (quad in main project) to whatever the function
        //GenerateTexture() creates
        Renderer renderer = GetComponent<Renderer>();
        renderer.material.mainTexture = GenerateTexture();
    }

    Texture2D GenerateTexture()
    {
        Texture2D texture = new Texture2D(width, height);

        for (int x = 0; x < width; x += squareSize)
        {
            for (int y = 0; y < height; y += squareSize)
            {
                //Generates a colour based on the x and y co-ord height
                Color color = CalculateColour(x / squareSize, y / squareSize);
                for (int i = 0; i < squareSize; i++)
                {
                    for (int j = 0; j < squareSize; j++)
                    {
                        //Creates the squareSize x squareSize box
                        texture.SetPixel(x + i, y + j, color);
                    }
                }
            }
        }

        texture.Apply();
        return texture;
    }

    Color CalculateColour(int x, int level)
    {
        string filePath = @"C:\Users\Freddie\Desktop\textFiles\map.txt";

        string[] mapLines = File.ReadAllLines(filePath);

        string mapStrip = mapLines[level];

        switch (mapStrip[x])
        {
            case '0':
                return new Color(0f, 183f, 235f, 1f);
            case '1':
                return new Color(255f, 194f, 0f, 1f);
            case '2':
                return new Color(0f, 100f, 0f, 1f);
            case '3':
                return new Color(0f, 255f, 0f, 0.5f);
            case '4':
                return new Color(244f, 245f, 226f, 1f);
            default:
                return new Color(255f, 0f, 255f, 1f);
        }
    }

}
