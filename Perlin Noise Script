using System;
using UnityEngine;
using System.IO;
using UnityEditor.VersionControl;
using TMPro;

public class PerlinNoise : MonoBehaviour
{
    //Sets width, height and scale of the perlin noise, as well as initialising the offset values
    //All are public variables so that they can be edited in the Unity client
    public int width = 250;
    public int height = 250;

    public float scale = 4f;

    public Int64 offsetX = 100;
    public Int64 offsetY = 100;

    public int squareSize = 10;
    public TMP_Text seed;

    void Start()
    {
        //Randomises the offset values using Unity's Engine so that the map is different every time
        offsetX = UnityEngine.Random.Range(0, 99999); 
        offsetY = UnityEngine.Random.Range(0, 99999);
        /*Changes the texture of the renderer material (quad in main project) to whatever the function
          GenerateTexture() creates*/
        Renderer renderer = GetComponent<Renderer>();
        renderer.material.mainTexture = GenerateTexture();
        //Creates a mapID based on the seed's value and then displays it and stores it in the database.
        string seedValue = getMapID();
        seed.text = $"{seedValue}";
        Database database = new Database();
        database.addMap(seedValue);

        //database.mapLeaderboard(seed.text, 10);
        //Astar.getBestPath();
    }

    /*Gets offsetX and offsetY and increases the length to 5 digits so the overall ID is 10 digits long. Arbitrary 0s are added at the
      start to keep the same number but increase the length. */
    public string getMapID()
    {
        string XmapID = offsetX.ToString();
        string YmapID = offsetY.ToString();
        while (XmapID.Length < 5)
        {
            XmapID = "0" + XmapID;
        }
        while (YmapID.Length < 5)
        {
            YmapID = "0" + YmapID;
        }
        return XmapID + YmapID;
    }

    Texture2D GenerateTexture()
    {
        //Creats the texture equal to the width and height
        Texture2D texture = new Texture2D(width, height);

        //Loops through every 3rd pixel, creating a squareSize x squareSize box from the top left each time based on the colour
        //inputs
        for (int x = 0; x < width; x += squareSize)
        {
            for (int y = 0; y < height; y += squareSize)
            {
                //Generates a colour based on the x and y co-ord height
                Color color = CalculateColour(x, y, y / squareSize);
                for (int i = 0; i < squareSize; i++)
                {
                    for (int j = 0; j < squareSize; j++)
                    {
                        //Creates the squareSize x squareSize box
                        texture.SetPixel(x + i, y + j, color);
                    }
                }
            }
        }
        //Applys the texture to the variable
        texture.Apply();
        return texture;
    }

    Color CalculateColour(int x, int y, int level)
    {
        //Calculates the float x and y value so that it can be input into the PerlinNoise function
        float xCoord = (float)x / width * scale + offsetX;
        float yCoord = (float)y / height * scale + offsetY;

        float perlinVal = Mathf.PerlinNoise(xCoord, yCoord);
        level = Math.Abs(level - 24);

        //Based on the height of the value, it's assigned a different colour
        if (perlinVal < 0.2)
        {
            //Water
            StoreMap(3, level);
            return ColourChoice.giveColour(3);
        }
        else if (perlinVal < 0.4)
        {
            //Sand
            StoreMap(1, level);
            return ColourChoice.giveColour(1);
        }
        else if (perlinVal < 0.6)
        {
            //Grass
            StoreMap(0, level);
            return ColourChoice.giveColour(0);
        }
        else if (perlinVal < 0.8)
        {
            //Hills
            StoreMap(2, level);
            return ColourChoice.giveColour(2);
        }
        else
        {
            //Mountain
            StoreMap(4, level);
            return ColourChoice.giveColour(4);
        }
    }

    public static string[] mapArr = new string[25];
    void StoreMap(int value, int level)
    {
        //Creates and populates the array mapArr with the map values
        mapArr[level] = mapArr[level] + Convert.ToString(value);
    }

}
