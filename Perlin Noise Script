using System;
using System.Runtime.InteropServices.WindowsRuntime;
using Unity.Mathematics;
using UnityEngine;
using UnityEngine.PlayerLoop;

public class PerlinNoise : MonoBehaviour
{
    public int width = 256;
    public int height = 256;

    public float scale = 1f;

    public float offsetX = 100f;
    public float offsetY = 100f;

    void Start()
    {
        offsetX = UnityEngine.Random.Range(0f, 99999f);
        offsetY = UnityEngine.Random.Range(0f, 99999f);
    }

    void Update()
    {
        Renderer renderer = GetComponent<Renderer>();
        renderer.material.mainTexture = GenerateTexture();
    }

    Texture2D GenerateTexture()
    {
        Texture2D texture = new Texture2D(width, height);

        for (int x = 0; x < width; x++)
        {
            for (int y = 0; y < height; y++)
            {
                Color color = CalculateColour(x, y);
                texture.SetPixel(x, y, color);

            }
        }

        texture.Apply();
        return texture;
    }

    Color CalculateColour(int x, int y)
    {
        float xCoord = (float)x / width * scale + offsetX;
        float yCoord = (float)y / height * scale + offsetY;

        float sample = Mathf.PerlinNoise(xCoord, yCoord);
        if (sample < 0.2)
        {
            return Color.cyan;
        }
        else if (sample < 0.4)
        {
            return Color.yellow;
        }
        else if (sample < 0.6)
        {
            return Color.green;
        }
        else if (sample < 0.8)
        {
            return Color.green;
        }
        else if (sample < 0.9)
        {
            return Color.grey;
        }
        else
        {
            return Color.white;
        }
        //return Color.red;
        //return new Color(sample, sample, sample);
    }


}
