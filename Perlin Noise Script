using System;
using System.Runtime.InteropServices.WindowsRuntime;
using Unity.Mathematics;
using UnityEngine;
using UnityEngine.PlayerLoop;

public class PerlinNoise : MonoBehaviour
{
    //Sets width, height and scale of the perlin noise, as well as initialising the offset values
    public int width = 256;
    public int height = 256;

    public float scale = 20f;

    public float offsetX = 100f;
    public float offsetY = 100f;

    void Start()
    {
        //Randomises the offset values using Unity's Engine so that the map is different every time
        offsetX = UnityEngine.Random.Range(0f, 99999f);
        offsetY = UnityEngine.Random.Range(0f, 99999f);
    }

    void Update()
    {
        //Changes the texture of the renderer material (quad in main project) to whatever the function
        //GenerateTexture() creates
        Renderer renderer = GetComponent<Renderer>();
        renderer.material.mainTexture = GenerateTexture();
    }

    Texture2D GenerateTexture()
    {
        //Creats the texture equal to the width and height
        Texture2D texture = new Texture2D(width, height);

        //Loops through every 3rd pixel, creating a 3x3 box from the top left each time based on the colour
        //inputs
        for (int x = 0; x < width; x += 3)
        {
            for (int y = 0; y < height; y += 3)
            {
                //Generates a colour based on the x and y co-ord height
                Color color = CalculateColour(x, y);
                for (int i = 0; i < 3; i++)
                {
                    for (int j = 0; j < 3; j++)
                    {
                        //Creates the 3x3 box
                        texture.SetPixel(x + i, y + j, color);
                    }
                }
            }
        }
        //Applys the texture to the variable
        texture.Apply();
        return texture;
    }

    Color CalculateColour(int x, int y)
    {
        //Calculates the float x and y value so that it can be input into the PerlinNoise function
        float xCoord = (float)x / width * scale + offsetX;
        float yCoord = (float)y / height * scale + offsetY;

        float perlinVal = Mathf.PerlinNoise(xCoord, yCoord);

        //Based on the height of the value, it's assigned a different colour
        if (perlinVal < 0.2)
        {
            //Water
            return new Color(0f, 183f, 235f, 1f);
        }
        else if (perlinVal < 0.4)
        {
            //Sand
            return new Color(255f, 194f, 0f, 1f);
        }
        else if (perlinVal < 0.6)
        {
            //Grass
            return new Color(0f, 100f, 0f, 1f);
        }
        else if (perlinVal < 0.8)
        {
            //Hills
            return new Color(0f, 255f, 0f, 0.5f);
        }
        else
        {
            //Mountain
            return new Color(244f, 245f, 226f, 1f);
        }
    }

}
