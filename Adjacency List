using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using UnityEngine;

public class AdjacenyList : MonoBehaviour
{
    //Tests the code when the program is launched
    private void Start()
    {
        createList();
    }

    void createList()
    {
        string path = @"C:\Users\Freddie\Desktop\textFiles\map.txt";
        //string testPath = @"C:\Users\Freddie\Desktop\textFiles\Weights.txt";
        string[] mapTxt = File.ReadAllLines(path);
        int[,] map = new int[25, 25];
        //Reads the file to a 2d array where weights are stored. The relevant tile can be derived from weight
        for (int i = 0; i < 25; i++)
        {
            string line = mapTxt[i];
            for (int j = 0; j < 25; j++)
            {
                map[i, j] = (int)Char.GetNumericValue(line[j]);
                map[i, j] = getWeights(map[i, j], -1);
            }
        }

        /*for (int i = 0; i < 25; i++)
        {
            for (int j = 0; j < 25; j++)
            {
                File.AppendAllText(testPath, map[i, j].ToString());
            }
            File.AppendAllText(testPath, Environment.NewLine);
        }*/
    }

    int getWeights(int startNode, int endNode)
    {
        //Logic to calculate the weight of moving from tile to tile or staying on a tile
        if (startNode == 0 || endNode == 0)
        {
            if (startNode == -1 || endNode == -1)
            {
                return 3;
            }
            else if (startNode == 1 || endNode == 1)
            {

            }
            else if (startNode == 2 || endNode == 2)
            {

            }
            else if (startNode == 3 || endNode == 3)
            {

            }
            else if (startNode == 4 || endNode == 4)
            {

            }
        }
        else if (startNode == 1 || endNode == 1)
        {
            if (startNode == -1 || endNode == -1)
            {
                return 1;
            }
            else if (startNode == 2 || endNode == 2)
            {

            }
            else if (startNode == 3 || endNode == 3)
            {

            }
            else if (startNode == 4 || endNode == 4)
            {

            }
        }
        else if (startNode == 2 || endNode == 2)
        {
            if (startNode == -1 || endNode == -1)
            {
                return 0;
            }
            else if (startNode == 3 || endNode == 3)
            {

            }
            else if (startNode == 4 || endNode == 4)
            {

            }
        }
        else if (startNode == 3 || endNode == 3)
        {
            if (startNode == -1 || endNode == -1)
            {
                return 2;
            }
            else if (startNode == 4 || endNode == 4)
            {

            }
        }
        else if (startNode == 4 || endNode == 4)
        {
            if (startNode == -1 || endNode == -1)
            {
                return 4;
            }
        }

        return 5;
    }

}
