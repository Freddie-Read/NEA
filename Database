using UnityEngine;
using System;
using System.Data.OleDb;
//using System.Data;
using MySql.Data;
using MySql.Data.MySqlClient;
using System.Linq;
using System.Collections;

public class Database : MonoBehaviour
{
    private MySqlConnection connection = new MySqlConnection("server=nea-database.cr2rnnwfbjfp.us-east-2.rds.amazonaws.com;" +
            "user=admin;database=NeaDatabase;port=3306;password=freddie747");

    public void Connect()
    {        
        try
        {
            Debug.Log("Connecting to MySQL...");
            connection.Open();

            string sql = "SELECT * FROM tblUsers";
            MySqlCommand command = new MySqlCommand(sql, connection);
            object result = command.ExecuteScalar();
            if (result != null)
            {
                Debug.Log(result);
            }

        }
        catch (Exception ex)
        {
            Debug.Log(ex.ToString());
        }

        connection.Close();
    }

    public void addUser(string userID, string surname, string email, string password, 
        int musicVol, int[] tile)
    {
        bool exists = checkRecordExists("tblUsers", "UserID", userID);
        if (exists == false)
        {
            try
            {
                connection.Open();
                Debug.Log("Adding User...");
                string addUser = $"INSERT INTO tblUsers VALUES('{userID}','{surname}','{email}','{password}'," +
                    $"{musicVol},{tile[0]},{tile[1]},{tile[2]},{tile[3]},{tile[4]})";
                MySqlCommand command = new MySqlCommand(addUser, connection);
                command.ExecuteNonQuery();
                Debug.Log("Added User");
            }
            catch (Exception ex)
            {
                Debug.Log(ex);
            }
            connection.Close();
        }
        
    }

    public void addMapScore(string mapID, string userID, int score)
    {
        bool firstExists = checkRecordExists("tblUserScores", "MapID", mapID);
        bool secondExists = checkRecordExists("tblUserScores", "UserID", userID);
        if (firstExists == true && secondExists == true)
        {
            try
            {
                Debug.Log("Adding Map Score (1)...");
                connection.Open();

                string sql = "SELECT Score FROM tblUserScores";
                MySqlCommand command = new MySqlCommand(sql, connection);
                object result = command.ExecuteScalar();
                connection.Close();
                if (Convert.ToInt32(result) > score)
                {
                    try
                    {
                        connection.Open();
                        Debug.Log("Adding Map Score (2)...");
                        string updateRecord = $"UPDATE tblUserScores SET Score = {score} WHERE MapID = {mapID} AND UserID = {userID}";
                        command = new MySqlCommand(updateRecord, connection);
                        command.ExecuteNonQuery();
                        Debug.Log("Updated Score");
                    }
                    catch (Exception ex)
                    {
                        Debug.Log(ex);
                    }
                    connection.Close();
                }
                else
                {
                    Debug.Log("Better score in Database");
                }

            }
            catch (Exception ex)
            {
                Debug.Log(ex.ToString());
            }

            connection.Close();
        }
        else
        {
            try
            {
                connection.Open();
                Debug.Log("Connecting to MySQL...");
                string addScore = $"INSERT INTO tblUserScores VALUES('{mapID}', '{userID}', {score})";
                MySqlCommand command = new MySqlCommand(addScore, connection);
                command.ExecuteNonQuery();
                Debug.Log("Added Score");
            }
            catch (Exception ex)
            {
                Debug.Log(ex);
            }
            connection.Close();
        }
        mapLeaderboard(mapID, score);

    }

    public void addMap(string mapID, int bestPath = 0)
    {
        bool exists = checkRecordExists("tblMaps", "MapID", mapID);
        if (exists == false)
        {
            try
            {
                Debug.Log(mapID + " " + mapID.Length);
                connection.Open();
                Debug.Log("Adding Map...");
                string addMap = $"INSERT INTO tblMaps(MapID, BestPath) VALUES('{mapID}', {bestPath})";
                MySqlCommand command = new MySqlCommand(addMap, connection);
                command.ExecuteNonQuery();
                Debug.Log("Added Map");
            }
            catch (Exception ex)
            {
                Debug.Log(ex);
            }
            connection.Close();
        }
    }

    public void mapLeaderboard(string mapID, int score)
    {
        try
        {
            int[] scores = new int[10];
            Debug.Log("Checking Leaderboards...");
            connection.Open();
            string getMapScores = $"SELECT Score1 FROM tblMaps WHERE MapID = '{mapID}'";
            MySqlCommand command = new MySqlCommand(getMapScores, connection);
            object result = command.ExecuteScalar();
            if (result != DBNull.Value)
            {
                for (int i = 0; i < 10; i++)
                {
                    getMapScores = $"SELECT Score{i + 1} FROM tblMaps WHERE MapID = '{mapID}'";
                    command = new MySqlCommand(getMapScores, connection);
                    result = command.ExecuteScalar();
                    if (result == DBNull.Value)
                        break;
                    else
                        Debug.Log(result.ToString());
                        scores[i] = Convert.ToInt32(result);
                }
                bool changed = false;
                int changedVal = 0;
                for (int i = 0; i < 10; i++)
                {
                    if (scores[i] != 0)
                    {
                        if (score <= scores[i])
                        {
                            Debug.Log($"Score: {score}, ArrScore = {scores[i]}");
                            int temp = scores[i];
                            scores[i] = score;
                            score = temp;
                            changed = true;
                            changedVal = i;
                        }
                    }
                    
                }
                if (changed == true)
                {
                    for (int i = changedVal; i < 10 - changedVal; i++)
                    {
                        string updateMap = $"UPDATE tblMaps SET Score{i + 1} = {scores[i]} WHERE MapID = {mapID}";
                        command = new MySqlCommand(updateMap, connection);
                        command.ExecuteNonQuery();
                    }
                }
                else
                {
                    Debug.Log("Not added to Leaderboard");
                }
            }
            else
            {
                string updateMap = $"UPDATE tblMaps SET Score1 = {score} WHERE MapID = '{mapID}'";
                command = new MySqlCommand(updateMap, connection);
                command.ExecuteNonQuery();
            }

            Debug.Log("Database Changed");
            
        }
        catch (Exception ex)
        {
            Debug.Log(ex.ToString());
        }

        connection.Close();
    }

    public bool checkRecordExists(string table, string column, string value)
    {
        try
        {
            Debug.Log("Checking Record...");
            connection.Open();

            string sql = $"SELECT {column} FROM {table} WHERE {column} = {value}";
            MySqlCommand command = new MySqlCommand(sql, connection);
            object result = command.ExecuteScalar();
            connection.Close();
            if (result == null)
            {
                return false;
            }
            else
            {
                Debug.Log("Record Exists");
                return true;
            }

        }
        catch (Exception ex)
        {
            Debug.Log(ex.ToString());
        }
        connection.Close();
        Debug.Log("Record doesn't exist");
        return false;

    }    
}
